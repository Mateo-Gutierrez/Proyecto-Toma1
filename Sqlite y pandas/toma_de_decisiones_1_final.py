# -*- coding: utf-8 -*-
"""Toma de decisiones 1 final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VXY_JQMUekPa5FuiTHexer4FY85qd5Wi
"""

# Descargar base de datos: https://github.com/Mateo-Gutierrez/Proyecto-Toma1/blob/main/student-por.csv

uploaded = files.upload()

from google.colab import files
import io
import pandas as pd
import sqlite3
uploaded_file_key = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[uploaded_file_key]))
print(df.head()) # Muestra las primeras filas del DataFrame

filename = list(uploaded.keys())[0]

df = pd.read_csv(io.BytesIO(uploaded[filename]), sep=';')
print(df.head())

print(df.columns)

# prompt: muestra las primeras 5 y ultimas 5 filas del df con tabulate

!pip install tabulate

from tabulate import tabulate

# Assuming 'df' is your DataFrame

# Display the first 5 rows
print(tabulate(df.head(5), headers='keys', tablefmt='psql'))

# Display the last 5 rows
print(tabulate(df.tail(5), headers='keys', tablefmt='psql'))

# prompt: muestrame  el resumen estadistico del df

(df.describe())

# prompt: data.groupby(["sex", "age"])["G3"].mean()

grouped_data = df.groupby(["sex", "age"])["G3"].mean()
grouped_data

conn = sqlite3.connect('student-por.db')
data = pd.read_sql_query("SELECT * from student_por", conn)
conn.close()

print("Identificación de valores faltantes:")
missing_values = data.isnull().sum()
print(tabulate(missing_values.reset_index(), headers=['Columna', 'Valores Faltantes'], tablefmt='psql'))

!apt install sqlite3

conn = sqlite3.connect('student-por.db')  # Changed database name
df.to_sql('student_por', conn, if_exists='replace', index=False)  # Changed table name
conn.close()

!sqlite3 student-por.db

"""CREATE TABLE barras_col AS SELECT sex, G3, school FROM student_por;  SELECT * FROM barras_col LIMIT 5;

CREATE TABLE barrasG3 AS SELECT G3, age, sex FROM student_por;  SELECT * FROM barrasG3 LIMIT 5;

CREATE TABLE rendimiento AS SELECT G1, G2, G3, absences, studytime, sex FROM
student_por;  SELECT * FROM rendimiento LIMIT 5;

CREATE TABLE apoyo AS SELECT G3, schoolsup, famsup, internet, studytime FROM student_por;  SELECT * FROM apoyo LIMIT 5;

# Ahora vamos a exportarlas de sql

# Tabla "barras_col"= "df_barras_col"
compuesta por
  - sex
  - G3
  - school
"""

import matplotlib.pyplot as plt
import seaborn as sns

conn = sqlite3.connect('student-por.db')
query = "SELECT * FROM barras_col"
df_barras_col = pd.read_sql_query(query, conn)
conn.close()

print(df_barras_col.head())

# Graficar la relación entre el sexo y las notas G3 por colegio con etiquetas
plt.figure(figsize=(10, 6))
ax = sns.barplot(x='school', y='G3', hue='sex', data=df_barras_col)

# Añadir etiquetas a las barras
for p in ax.patches:
    ax.annotate(f'{p.get_height():.2f}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', fontsize=12, color='black',
                xytext=(0, 5), textcoords='offset points')

# Título y etiquetas
plt.title('Relación entre Sexo y Nota final (G3) por Colegio')
plt.xlabel('Colegio')
plt.ylabel('Nota final (G3)')

# Mostrar gráfico
plt.show()

"""# Tabla "barrasG3"= "df_barrasG3"
compuesta por
  - sex
  - G3
  - ageahora
"""

conn = sqlite3.connect('student-por.db')
query = "SELECT * FROM barrasG3"
df_barrasG3 = pd.read_sql_query(query, conn)
conn.close()

print(df_barrasG3.head())

# Configurar el gráfico
plt.figure(figsize=(12, 6))
barplot = sns.barplot(
    x='age',  # Edad en el eje X
    y='G3',   # Nota final en el eje Y
    hue='sex',  # Agrupar por sexo
    data=df_barrasG3,  # DataFrame actualizado
    errorbar=None,  # Deshabilitar intervalos de error
    palette='Set2'  # Paleta de colores
)

# Agregar etiquetas a las barras
for p in barplot.patches:
    if p.get_height() > 0:  # Evitar etiquetas en barras con altura cero
        barplot.annotate(
            format(p.get_height(), '.1f'),  # Formato de la etiqueta (1 decimal)
            (p.get_x() + p.get_width() / 2., p.get_height()),  # Posición de la etiqueta
            ha='center',  # Alinear horizontalmente
            va='center',  # Alinear verticalmente
            xytext=(0, 5),  # Desplazamiento en píxeles
            textcoords='offset points',  # Coordenadas relativas
            fontsize=10  # Tamaño de la etiqueta
        )

# Personalizar el gráfico
plt.title('Nota final G3 por Edad y Sexo', fontsize=16)
plt.xlabel('Edad', fontsize=12)
plt.ylabel('Nota Final (G3)', fontsize=12)
plt.legend(title='Sexo', loc='upper right', labels=['Femenino', 'Masculino'])
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Mostrar el gráfico
plt.show()

"""###***Correlación entre el rendimiento (G1, G2, G3) y las horas de estudio (studytime)***

# Tabla "rendimiento"= "df_rendimiento"
compuesta por
  - G1
  - G2
  - G3
  - absences
  - studytime
  - sex
"""

conn = sqlite3.connect('student-por.db')
query = "SELECT * FROM rendimiento"
df_rendimiento = pd.read_sql_query(query, conn)
conn.close()

print(df_rendimiento.head())

# Crear un gráfico de dispersión para la relación entre horas de estudio y nota final
sns.scatterplot(x='studytime', y='G3', data=df_rendimiento, hue='sex')

# Personalizar el gráfico
plt.title('Relación entre horas de estudio y Nota final (G3)', fontsize=16)
plt.xlabel('Horas de estudio semanales (studytime)', fontsize=12)
plt.ylabel('Nota final (G3)', fontsize=12)
plt.legend(title='Sexo', labels=['Femenino', 'Masculino'], loc='upper left')
plt.grid(alpha=0.5)

# Mostrar el gráfico
plt.tight_layout()
plt.show()

# Configurar la figura y los ejes
fig, axes = plt.subplots(1, 3, figsize=(18, 5), sharey=True)

# Graficar correlaciones entre studytime y G1, G2, G3
sns.scatterplot(ax=axes[0], x='studytime', y='G1', data=df_rendimiento)
axes[0].set_title('Tiempo de Estudio vs G1')
axes[0].set_xlabel('Tiempo de Estudio')
axes[0].set_ylabel('Nota G1')

sns.scatterplot(ax=axes[1], x='studytime', y='G2', data=df_rendimiento)
axes[1].set_title('Tiempo de Estudio vs G2')
axes[1].set_xlabel('Tiempo de Estudio')
axes[1].set_ylabel('Nota G2')

sns.scatterplot(ax=axes[2], x='studytime', y='G3', data=df_rendimiento)
axes[2].set_title('Tiempo de Estudio vs G3')
axes[2].set_xlabel('Tiempo de Estudio')
axes[2].set_ylabel('Nota G3')

# Ajustar el diseño
plt.tight_layout()
plt.show()

"""###***Correlación entre las faltas de asistencia (absences) y las notas finales (G3)***
Objetivo: Analizar si las ausencias tienen un impacto negativo en las notas.


El gráfico indica que, para la variable absences, los estudiantes con pocas ausencias (entre 0 y 10) tienden a tener calificaciones más altas en G3 (por encima de 7.5). La línea de regresión descendente sugiere una correlación negativa entre las ausencias y las notas finales: a medida que aumentan las ausencias, las calificaciones tienden a disminuir.
"""

# Gráfico de regresión con df_rendimiento
sns.regplot(
    x='absences',  # Columna de ausencias
    y='G3',        # Columna de nota final
    data=df_rendimiento,  # DataFrame actualizado
    scatter_kws={'s': 30},  # Tamaño de los puntos en el gráfico
    line_kws={'color': 'red'}  # Color de la línea de regresión
)

# Personalización del gráfico
plt.title('Relación entre las Ausencias y la Nota final (G3)', fontsize=14)
plt.xlabel('Ausencias', fontsize=12)
plt.ylabel('Nota final (G3)', fontsize=12)
plt.grid(alpha=0.3)
plt.tight_layout()

# Mostrar el gráfico
plt.show()

"""###***. Impacto de los recursos de apoyo escolar (schoolsup y famsup) en las notas***
Objetivo: Evaluar si el apoyo escolar y familiar tiene un efecto en las notas.

Grafico 1: El gráfico muestra que los estudiantes sin apoyo escolar (schoolsup = no) tienen un rendimiento ligeramente superior en la nota final (G3) en comparación con quienes reciben apoyo escolar, aunque las diferencias en los promedios son pequeñas y la mediana es más alta para el grupo sin apoyo. Esto podría explicarse porque los estudiantes con apoyo escolar suelen requerir asistencia debido a dificultades académicas previas, mientras que quienes no lo reciben podrían tener una base académica más sólida y no necesitar este tipo de ayuda.

Grafico 2:Los estudiantes que reciben apoyo familiar (famsup = yes) presentan un rendimiento en G3 ligeramente superior al de aquellos que no lo reciben, aunque las diferencias en las notas finales entre ambos grupos son mínimas. Esto sugiere que, si bien el apoyo familiar podría ser un factor motivador, su impacto en el rendimiento académico es limitado, y otros factores como los hábitos de estudio (studytime) o la asistencia (absences) podrían tener una influencia más significativa en las calificaciones.

# Tabla "Apoyo"= "df_Apoyo"
compuesta por
  - G3
  - schoolsup
  - studytime
  - famsup
  - internet
"""

conn = sqlite3.connect('student-por.db')
query = "SELECT * FROM apoyo"
df_apoyo = pd.read_sql_query(query, conn)
conn.close()

print(df_apoyo.head())

# Impacto del apoyo escolar en la Nota final (G3)
plt.figure(figsize=(8, 6))
barplot_schoolsup = sns.barplot(x='schoolsup', y='G3', data=df_apoyo)
plt.title('Impacto del Apoyo Escolar en la Nota Final (G3)', fontsize=14)
plt.xlabel('Apoyo Escolar', fontsize=12)
plt.ylabel('Nota Final (G3)', fontsize=12)

# Agregar etiquetas a las barras
for p in barplot_schoolsup.patches:
    barplot_schoolsup.annotate(f'{p.get_height():.2f}',
                               (p.get_x() + p.get_width() / 2., p.get_height()),
                               ha='center', va='center',
                               fontsize=12, color='black',
                               xytext=(0, 8), textcoords='offset points')

plt.tight_layout()
plt.show()

# Impacto del apoyo familiar en la Nota final (G3)
plt.figure(figsize=(8, 6))
barplot_famsup = sns.barplot(x='famsup', y='G3', data=df_apoyo)
plt.title('Impacto del Apoyo Familiar en la Nota Final (G3)', fontsize=14)
plt.xlabel('Apoyo Familiar', fontsize=12)
plt.ylabel('Nota Final (G3)', fontsize=12)

# Agregar etiquetas a las barras
for p in barplot_famsup.patches:
    barplot_famsup.annotate(f'{p.get_height():.2f}',
                            (p.get_x() + p.get_width() / 2., p.get_height()),
                            ha='center', va='center',
                            fontsize=12, color='black',
                            xytext=(0, 8), textcoords='offset points')

plt.tight_layout()
plt.show()

"""###***Comparación de notas entre los estudiantes con acceso a internet (internet)***

Objetivo: Ver si los estudiantes con acceso a internet tienen un mejor rendimiento académico.

El acceso a internet por sí solo no parece ser un factor determinante en el rendimiento académico (G3), ya que:

-Tanto los estudiantes con acceso a internet ("yes") como aquellos sin acceso ("no") tienen una mediana de calificaciones finales (G3) muy parecida, alrededor de 12. Esto sugiere que, en promedio, el acceso a internet no tiene un impacto significativo en la nota final.

-Los estudiantes con acceso a internet tienen una distribución ligeramente más compacta en las calificaciones (menos dispersión) en comparación con los estudiantes sin acceso.
"""

# Gráfico de caja y bigotes con df_apoyo
sns.boxplot(
    x='internet',  # Acceso a internet (categoría)
    y='G3',        # Nota final
    data=df_apoyo  # DataFrame actualizado
)

# Personalización del gráfico
plt.title('Impacto del acceso a Internet en la Nota final (G3)', fontsize=14)
plt.xlabel('Acceso a Internet', fontsize=12)
plt.ylabel('Nota final (G3)', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()

# Mostrar el gráfico
plt.show()

"""
###***Acceso a internet (internet), las horas de estudio (studytime), y el apoyo escolar (schoolsup) están relacionados.***


El gráfico muestra cómo el acceso a internet, las horas de estudio y el apoyo escolar están relacionados. Los estudiantes sin internet que reciben apoyo escolar tienden a tener un rango más amplio y una mediana ligeramente superior de horas de estudio, lo que sugiere que este apoyo fomenta mejores hábitos de estudio. En cambio, quienes no tienen apoyo escolar muestran una mediana más baja, indicando menor constancia. Entre los estudiantes con acceso a internet, aquellos con apoyo escolar mantienen una mediana alta y datos más consistentes, reforzando la importancia del apoyo escolar. Sin embargo, quienes no cuentan con este apoyo presentan una mayor dispersión en las horas de estudio, lo que sugiere que el acceso a internet por sí solo no garantiza hábitos eficientes."""

# Crear un gráfico combinado para explorar la interacción entre 'internet', 'studytime' y 'schoolsup'
plt.figure(figsize=(10, 6))

# Agrupamos por acceso a internet y visualizamos el tiempo de estudio según el apoyo escolar
sns.boxplot(
    x='internet',  # Acceso a internet
    y='studytime',  # Tiempo de estudio
    hue='schoolsup',  # Apoyo escolar
    data=df_apoyo,  # DataFrame actualizado
    palette='Set2'  # Paleta de colores
)

# Añadimos título y etiquetas
plt.title('Interacción entre Acceso a Internet, Horas de Estudio y Apoyo Escolar', fontsize=14)
plt.xlabel('Acceso a Internet (Sí/No)', fontsize=12)
plt.ylabel('Horas de Estudio (studytime)', fontsize=12)
plt.legend(title='Apoyo Escolar', loc='upper right')
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()

# Mostrar gráfico
plt.show()